/* tslint:disable */
/* eslint-disable */
/**
 * Coolestprojects registration
 * This api exposes the api\'s for the Coolestproject registration website, voting system, event setup.
 *
 * The version of the OpenAPI document: 0.0.4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'street'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'house_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'municipality_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'box_number'?: string;
    /**
     * 
     * @type {string}
     * @memberof Address
     */
    'postalcode'?: string;
}
/**
 * 
 * @export
 * @interface Approval
 */
export interface Approval {
    /**
     * 
     * @type {number}
     * @memberof Approval
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Approval
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Approval
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface Attachment
 */
export interface Attachment {
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    'filename'?: string;
    /**
     * 
     * @type {number}
     * @memberof Attachment
     */
    'size'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Attachment
     */
    'confirmed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Attachment
     */
    'exists'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Attachment
     */
    'type'?: AttachmentTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum AttachmentTypeEnum {
    Link = 'link',
    Movie = 'movie'
}

/**
 * 
 * @export
 * @interface Login
 */
export interface Login {
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    'api_key'?: string;
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    'expires'?: string;
    /**
     * 
     * @type {string}
     * @memberof Login
     */
    'language'?: LoginLanguageEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum LoginLanguageEnum {
    Nl = 'nl',
    Fr = 'fr',
    En = 'en'
}

/**
 * 
 * @export
 * @interface LoginActivate
 */
export interface LoginActivate {
    /**
     * 
     * @type {string}
     * @memberof LoginActivate
     */
    'jwt'?: string;
}
/**
 * 
 * @export
 * @interface LoginMail
 */
export interface LoginMail {
    /**
     * 
     * @type {string}
     * @memberof LoginMail
     */
    'email'?: string;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface OtherProject
 */
export interface OtherProject {
    /**
     * 
     * @type {string}
     * @memberof OtherProject
     */
    'project_code'?: string;
}
/**
 * 
 * @export
 * @interface OwnProject
 */
export interface OwnProject {
    /**
     * 
     * @type {number}
     * @memberof OwnProject
     */
    'project_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof OwnProject
     */
    'project_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof OwnProject
     */
    'project_descr'?: string;
    /**
     * 
     * @type {string}
     * @memberof OwnProject
     */
    'project_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof OwnProject
     */
    'project_lang'?: OwnProjectProjectLangEnum;
    /**
     * 
     * @type {Array<Participant>}
     * @memberof OwnProject
     */
    'participants'?: Array<Participant>;
    /**
     * 
     * @type {Array<Attachment>}
     * @memberof OwnProject
     */
    'attachments'?: Array<Attachment>;
    /**
     * 
     * @type {boolean}
     * @memberof OwnProject
     */
    'delete_possible'?: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum OwnProjectProjectLangEnum {
    Nl = 'nl',
    Fr = 'fr',
    En = 'en'
}

/**
 * 
 * @export
 * @interface Participant
 */
export interface Participant {
    /**
     * 
     * @type {string}
     * @memberof Participant
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof Participant
     */
    'name'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Participant
     */
    'self'?: boolean;
}
/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {OwnProject}
     * @memberof Project
     */
    'own_project'?: OwnProject;
    /**
     * 
     * @type {OtherProject}
     * @memberof Project
     */
    'other_project'?: OtherProject;
    /**
     * 
     * @type {Array<Attachment>}
     * @memberof Project
     */
    'attachments'?: Array<Attachment>;
}
/**
 * 
 * @export
 * @interface Question
 */
export interface Question {
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'positive'?: string;
    /**
     * 
     * @type {string}
     * @memberof Question
     */
    'negative'?: string;
}
/**
 * 
 * @export
 * @interface Registration
 */
export interface Registration {
    /**
     * 
     * @type {User}
     * @memberof Registration
     */
    'user'?: User;
    /**
     * 
     * @type {Project}
     * @memberof Registration
     */
    'project'?: Project;
}
/**
 * 
 * @export
 * @interface SASToken
 */
export interface SASToken {
    /**
     * 
     * @type {string}
     * @memberof SASToken
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof SASToken
     */
    'expiresOn'?: string;
    /**
     * 
     * @type {string}
     * @memberof SASToken
     */
    'startsOn'?: string;
}
/**
 * 
 * @export
 * @interface Settings
 */
export interface Settings {
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'startDateEvent'?: string;
    /**
     * 
     * @type {number}
     * @memberof Settings
     */
    'maxAge'?: number;
    /**
     * 
     * @type {number}
     * @memberof Settings
     */
    'minAge'?: number;
    /**
     * 
     * @type {number}
     * @memberof Settings
     */
    'guardianAge'?: number;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'tshirtDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'enviroment'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Settings
     */
    'waitingListActive'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Settings
     */
    'maxUploadSize'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Settings
     */
    'isActive'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'eventBeginDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'registrationOpenDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'registrationClosedDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'projectClosedDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'officialStartDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'eventEndDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof Settings
     */
    'eventTitle'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Settings
     */
    'isRegistrationOpen'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Settings
     */
    'isProjectClosed'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof Settings
     */
    'maxRegistration'?: number;
    /**
     * 
     * @type {number}
     * @memberof Settings
     */
    'maxParticipants'?: number;
}
/**
 * 
 * @export
 * @interface Tshirt
 */
export interface Tshirt {
    /**
     * 
     * @type {number}
     * @memberof Tshirt
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Tshirt
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface TshirtGroup
 */
export interface TshirtGroup {
    /**
     * 
     * @type {string}
     * @memberof TshirtGroup
     */
    'group': string;
    /**
     * 
     * @type {Array<Tshirt>}
     * @memberof TshirtGroup
     */
    'items'?: Array<Tshirt>;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'language': UserLanguageEnum;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'firstname': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastname': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'sex': UserSexEnum;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'gsm'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof User
     */
    'general_questions'?: Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof User
     */
    'mandatory_approvals': Array<number>;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'year': number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'month': number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    't_size'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'gsm_guardian'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email_guardian'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'via'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'medical'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'delete_possible'?: boolean;
    /**
     * 
     * @type {Address}
     * @memberof User
     */
    'address'?: Address;
}

/**
    * @export
    * @enum {string}
    */
export enum UserLanguageEnum {
    Nl = 'nl',
    Fr = 'fr',
    En = 'en'
}
/**
    * @export
    * @enum {string}
    */
export enum UserSexEnum {
    M = 'm',
    F = 'f',
    X = 'x'
}


/**
 * AttachmentApi - axios parameter creator
 * @export
 */
export const AttachmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete attachments
         * @param {string} name name of attachment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachmentsNameDelete: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('attachmentsNameDelete', 'name', name)
            const localVarPath = `/attachments/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication loginToken required
            await setApiKeyToObject(localVarHeaderParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get new SAS token for attachment
         * @param {string} name name of attachment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachmentsNameSasPost: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('attachmentsNameSasPost', 'name', name)
            const localVarPath = `/attachments/{name}/sas`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication loginToken required
            await setApiKeyToObject(localVarHeaderParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new attachment
         * @param {Attachment} [attachment] The attachment to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachmentsPost: async (attachment?: Attachment, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/attachments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication loginToken required
            await setApiKeyToObject(localVarHeaderParameter, "api_key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attachment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AttachmentApi - functional programming interface
 * @export
 */
export const AttachmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AttachmentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary delete attachments
         * @param {string} name name of attachment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attachmentsNameDelete(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.attachmentsNameDelete(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get new SAS token for attachment
         * @param {string} name name of attachment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attachmentsNameSasPost(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SASToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.attachmentsNameSasPost(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create new attachment
         * @param {Attachment} [attachment] The attachment to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async attachmentsPost(attachment?: Attachment, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SASToken>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.attachmentsPost(attachment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AttachmentApi - factory interface
 * @export
 */
export const AttachmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AttachmentApiFp(configuration)
    return {
        /**
         * 
         * @summary delete attachments
         * @param {string} name name of attachment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachmentsNameDelete(name: string, options?: any): AxiosPromise<void> {
            return localVarFp.attachmentsNameDelete(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get new SAS token for attachment
         * @param {string} name name of attachment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachmentsNameSasPost(name: string, options?: any): AxiosPromise<SASToken> {
            return localVarFp.attachmentsNameSasPost(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new attachment
         * @param {Attachment} [attachment] The attachment to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        attachmentsPost(attachment?: Attachment, options?: any): AxiosPromise<SASToken> {
            return localVarFp.attachmentsPost(attachment, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AttachmentApi - object-oriented interface
 * @export
 * @class AttachmentApi
 * @extends {BaseAPI}
 */
export class AttachmentApi extends BaseAPI {
    /**
     * 
     * @summary delete attachments
     * @param {string} name name of attachment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentApi
     */
    public attachmentsNameDelete(name: string, options?: AxiosRequestConfig) {
        return AttachmentApiFp(this.configuration).attachmentsNameDelete(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get new SAS token for attachment
     * @param {string} name name of attachment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentApi
     */
    public attachmentsNameSasPost(name: string, options?: AxiosRequestConfig) {
        return AttachmentApiFp(this.configuration).attachmentsNameSasPost(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new attachment
     * @param {Attachment} [attachment] The attachment to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AttachmentApi
     */
    public attachmentsPost(attachment?: Attachment, options?: AxiosRequestConfig) {
        return AttachmentApiFp(this.configuration).attachmentsPost(attachment, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login / Activate account
         * @param {LoginActivate} [loginActivate] Login information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost: async (loginActivate?: LoginActivate, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginActivate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete Login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get new token to login
         * @param {LoginMail} loginMail email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailTokenPost: async (loginMail: LoginMail, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginMail' is not null or undefined
            assertParamExists('mailTokenPost', 'loginMail', loginMail)
            const localVarPath = `/mailToken`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginMail, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LoginApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Login / Activate account
         * @param {LoginActivate} [loginActivate] Login information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginPost(loginActivate?: LoginActivate, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Login>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginPost(loginActivate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete Login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logoutPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logoutPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get new token to login
         * @param {LoginMail} loginMail email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mailTokenPost(loginMail: LoginMail, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mailTokenPost(loginMail, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LoginApiFp(configuration)
    return {
        /**
         * 
         * @summary Login / Activate account
         * @param {LoginActivate} [loginActivate] Login information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginPost(loginActivate?: LoginActivate, options?: any): AxiosPromise<Login> {
            return localVarFp.loginPost(loginActivate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete Login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logoutPost(options?: any): AxiosPromise<void> {
            return localVarFp.logoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get new token to login
         * @param {LoginMail} loginMail email address
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mailTokenPost(loginMail: LoginMail, options?: any): AxiosPromise<void> {
            return localVarFp.mailTokenPost(loginMail, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * 
     * @summary Login / Activate account
     * @param {LoginActivate} [loginActivate] Login information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public loginPost(loginActivate?: LoginActivate, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).loginPost(loginActivate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete Login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public logoutPost(options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).logoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get new token to login
     * @param {LoginMail} loginMail email address
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public mailTokenPost(loginMail: LoginMail, options?: AxiosRequestConfig) {
        return LoginApiFp(this.configuration).mailTokenPost(loginMail, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new participant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        participantsPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/participants`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication loginToken required
            await setApiKeyToObject(localVarHeaderParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectinfoDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projectinfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication loginToken required
            await setApiKeyToObject(localVarHeaderParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get projectinfo for the logged in user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectinfoGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projectinfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication loginToken required
            await setApiKeyToObject(localVarHeaderParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update project
         * @param {Project} [project] Project info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectinfoPatch: async (project?: Project, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projectinfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication loginToken required
            await setApiKeyToObject(localVarHeaderParameter, "api_key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(project, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create project
         * @param {Project} [project] Project info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectinfoPost: async (project?: Project, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projectinfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication loginToken required
            await setApiKeyToObject(localVarHeaderParameter, "api_key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(project, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new participant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async participantsPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.participantsPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary delete project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectinfoDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectinfoDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get projectinfo for the logged in user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectinfoGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectinfoGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update project
         * @param {Project} [project] Project info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectinfoPatch(project?: Project, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectinfoPatch(project, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary create project
         * @param {Project} [project] Project info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectinfoPost(project?: Project, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Project>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectinfoPost(project, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new participant
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        participantsPost(options?: any): AxiosPromise<void> {
            return localVarFp.participantsPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete project
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectinfoDelete(options?: any): AxiosPromise<void> {
            return localVarFp.projectinfoDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get projectinfo for the logged in user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectinfoGet(options?: any): AxiosPromise<Project> {
            return localVarFp.projectinfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update project
         * @param {Project} [project] Project info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectinfoPatch(project?: Project, options?: any): AxiosPromise<Project> {
            return localVarFp.projectinfoPatch(project, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create project
         * @param {Project} [project] Project info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectinfoPost(project?: Project, options?: any): AxiosPromise<Project> {
            return localVarFp.projectinfoPost(project, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
    /**
     * 
     * @summary Create new participant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public participantsPost(options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).participantsPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete project
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectinfoDelete(options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectinfoDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get projectinfo for the logged in user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectinfoGet(options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectinfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update project
     * @param {Project} [project] Project info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectinfoPatch(project?: Project, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectinfoPatch(project, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create project
     * @param {Project} [project] Project info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public projectinfoPost(project?: Project, options?: AxiosRequestConfig) {
        return ProjectApiFp(this.configuration).projectinfoPost(project, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RegistrationApi - axios parameter creator
 * @export
 */
export const RegistrationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new registration
         * @param {Registration} registration The registration to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPost: async (registration: Registration, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registration' is not null or undefined
            assertParamExists('registerPost', 'registration', registration)
            const localVarPath = `/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registration, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RegistrationApi - functional programming interface
 * @export
 */
export const RegistrationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RegistrationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new registration
         * @param {Registration} registration The registration to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerPost(registration: Registration, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerPost(registration, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RegistrationApi - factory interface
 * @export
 */
export const RegistrationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RegistrationApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new registration
         * @param {Registration} registration The registration to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPost(registration: Registration, options?: any): AxiosPromise<void> {
            return localVarFp.registerPost(registration, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RegistrationApi - object-oriented interface
 * @export
 * @class RegistrationApi
 * @extends {BaseAPI}
 */
export class RegistrationApi extends BaseAPI {
    /**
     * 
     * @summary Create new registration
     * @param {Registration} registration The registration to create.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RegistrationApi
     */
    public registerPost(registration: Registration, options?: AxiosRequestConfig) {
        return RegistrationApiFp(this.configuration).registerPost(registration, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SettingsApi - axios parameter creator
 * @export
 */
export const SettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetch: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsApi - functional programming interface
 * @export
 */
export const SettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetch(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Settings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetch(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SettingsApi - factory interface
 * @export
 */
export const SettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettingsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetch(options?: any): AxiosPromise<Settings> {
            return localVarFp.fetch(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export class SettingsApi extends BaseAPI {
    /**
     * 
     * @summary Get settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public fetch(options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).fetch(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userinfoDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/userinfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication loginToken required
            await setApiKeyToObject(localVarHeaderParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get userinfo for the logged in user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userinfoGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/userinfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication loginToken required
            await setApiKeyToObject(localVarHeaderParameter, "api_key", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update user
         * @param {User} [user] User info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userinfoPatch: async (user?: User, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/userinfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication loginToken required
            await setApiKeyToObject(localVarHeaderParameter, "api_key", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary delete user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userinfoDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userinfoDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get userinfo for the logged in user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userinfoGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userinfoGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update user
         * @param {User} [user] User info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userinfoPatch(user?: User, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userinfoPatch(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * 
         * @summary delete user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userinfoDelete(options?: any): AxiosPromise<void> {
            return localVarFp.userinfoDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get userinfo for the logged in user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userinfoGet(options?: any): AxiosPromise<User> {
            return localVarFp.userinfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update user
         * @param {User} [user] User info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userinfoPatch(user?: User, options?: any): AxiosPromise<User> {
            return localVarFp.userinfoPatch(user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * 
     * @summary delete user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userinfoDelete(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userinfoDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get userinfo for the logged in user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userinfoGet(options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userinfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update user
     * @param {User} [user] User info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public userinfoPatch(user?: User, options?: AxiosRequestConfig) {
        return UserApiFp(this.configuration).userinfoPatch(user, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ValuesApi - axios parameter creator
 * @export
 */
export const ValuesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Approvals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchApprovals: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/approvals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Questions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchQuestions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/questions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get TShirts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTshirts: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tshirts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ValuesApi - functional programming interface
 * @export
 */
export const ValuesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ValuesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Approvals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchApprovals(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Approval>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchApprovals(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Questions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchQuestions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Question>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchQuestions(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get TShirts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchTshirts(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TshirtGroup>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchTshirts(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ValuesApi - factory interface
 * @export
 */
export const ValuesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ValuesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Approvals
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchApprovals(options?: any): AxiosPromise<Array<Approval>> {
            return localVarFp.fetchApprovals(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Questions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchQuestions(options?: any): AxiosPromise<Array<Question>> {
            return localVarFp.fetchQuestions(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get TShirts
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchTshirts(options?: any): AxiosPromise<Array<TshirtGroup>> {
            return localVarFp.fetchTshirts(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ValuesApi - object-oriented interface
 * @export
 * @class ValuesApi
 * @extends {BaseAPI}
 */
export class ValuesApi extends BaseAPI {
    /**
     * 
     * @summary Get Approvals
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValuesApi
     */
    public fetchApprovals(options?: AxiosRequestConfig) {
        return ValuesApiFp(this.configuration).fetchApprovals(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Questions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValuesApi
     */
    public fetchQuestions(options?: AxiosRequestConfig) {
        return ValuesApiFp(this.configuration).fetchQuestions(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get TShirts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ValuesApi
     */
    public fetchTshirts(options?: AxiosRequestConfig) {
        return ValuesApiFp(this.configuration).fetchTshirts(options).then((request) => request(this.axios, this.basePath));
    }
}


